% Image Processing Toolbox AutoGenerated Script

%Initializations
diary(strcat('..\logs\Log_', datestr(now, 'yyyy-mm-dd_HH.MM.SS'), '.txt'));

% Input arguments
inputHolder=DirInput('C:\Documents and Settings\troken\Pulpit\impro\','*.tif');

% Preprocessing stage
% preProcessing=Preprocessing(inputHolder);
% preProcessing.verboseMode(1);
% cropVal = 4;
% preProcessing.run(NoiseRemove(), Vignetting(), HistStretch(), Crop(cropVal));

% Segmentation
segmentation=Segmentation(inputHolder);
% segmentation.verboseMode(1);
%windowSize=20;
%threshold=0.01;
%median=0;
%segmentation.run(SegAT(windowSize, threshold,median));

%epochs=100;
%segmentation.run(SegCLN(epochs));
%options = [2 100 0.00001 0];
%threshold=0.8;
%segmentation.run(SegFCM(3, options, 0.8)); % time consumming

%segmentation.run(Multiplication(SegAT(20, 0.01,0),SegCLN(100)));
%options = [2 100 0.00001 0];
%threshold=0.6;
%segmentation.run(SegFCMOff(3, options,threshold));
%clusters=3;
%segmentation.run(SegKM(clusters));
%clusters=3;
%segmentation.run(SegKMOff(clusters));

featuresExtraction=FeaturesExtraction(inputHolder);
featuresExtraction.verboseMode(1);
classificationGroup='Benign';
features=featuresExtraction.run(ExtractFeatures(classificationGroup));

% ForwardSelection('KNN', crossVal, features, cell(0), 0, 'all');
% ForwardSelection('Naive Bayes', crossVal, features, cell(0), 0, 'all');
% ForwardSelection('Decision trees', crossVal, features, cell(0), 0, 'all');
% ForwardSelection('Ensemble classifier', crossVal, features, cell(0), 0, 'all');

%[bestScore, bestSet] = FullSearchAllClass(crossVal, features, 2, 3, 'all');

% ForwardSelection('KNN', crossVal, features, bestSet{1}, bestScore(1), 'all');
% ForwardSelection('Naive Bayes', crossVal, features, bestSet{2}, bestScore(2), 'all');
% ForwardSelection('Decision trees', crossVal, features, bestSet{3}, bestScore(3), 'all');
% ForwardSelection('Ensemble classifier', crossVal, features, bestSet{4}, bestScore(4), 'all');

% single features
% Classify(features, style, 'Area_mean');
% Classify(features, style, 'Area_var');
% classify(features, style, 'Perimeter_mean');
% classify(features, style, 'Perimeter_var');
% classify(features, style, 'Eccentricity_mean');
% classify(features, style, 'Eccentricity_var');
% classify(features, style, 'MajorAxisLength_mean');
% classify(features, style, 'MajorAxisLength_var');
% classify(features, style, 'MinorAxisLength_mean');
% classify(features, style, 'MinorAxisLength_var');
% classify(features, style, 'LuminanceMean_mean');
% classify(features, style, 'LuminanceMean_var');
% classify(features, style, 'LuminanceVariance_mean');
% classify(features, style, 'LuminanceVariance_var');
% classify(features, style, 'DistToCentroid_mean');
% classify(features, style, 'DistToCentroid_var');

%TODO
% classify(features, style, 'Area_mean');
% classify(features, style, 'Area_var');
% classify(features, style, 'Perimeter_mean');
% classify(features, style, 'Perimeter_var');
% classify(features, style, 'Eccentricity_mean');
% classify(features, style, 'Eccentricity_var');
% classify(features, style, 'MajorAxisLength_mean');
% classify(features, style, 'MajorAxisLength_var');
% classify(features, style, 'MinorAxisLength_mean');
% classify(features, style, 'MinorAxisLength_var');
% classify(features, style, 'LuminanceMean_mean');
% classify(features, style, 'LuminanceMean_var');
% classify(features, style, 'LuminanceVariance_mean');
% classify(features, style, 'LuminanceVariance_var');
% classify(features, style, 'DistToCentroid_mean');
% classify(features, style, 'DistToCentroid_var');


diary off;
%clear