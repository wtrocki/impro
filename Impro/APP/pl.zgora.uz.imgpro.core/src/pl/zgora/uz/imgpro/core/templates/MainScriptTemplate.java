package pl.zgora.uz.imgpro.core.templates;

import pl.zgora.uz.imgpro.model.diagram.*;
import pl.zgora.uz.imgpro.core.templates.TemplateHelper;
import pl.zgora.uz.imgpro.core.transformation.InvocationChain;
import java.util.List;

public class MainScriptTemplate
{
  protected static String nl;
  public static synchronized MainScriptTemplate create(String lineSeparator)
  {
    nl = lineSeparator;
    MainScriptTemplate result = new MainScriptTemplate();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "% Image Processing Toolbox AutoGenerated Script" + NL + "" + NL + "%Initializations" + NL + "diary(strcat('..\\logs\\Log_', datestr(now, 'yyyy-mm-dd_HH.MM.SS'), '.txt'));" + NL;
  protected final String TEXT_2 = "\t" + NL + "%% ------------------------  EXTRACTION FOR FEATURE GROUP NR ";
  protected final String TEXT_3 = NL + "%% Input arguments";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + "inputHolder=DirInput(";
  protected final String TEXT_6 = ");";
  protected final String TEXT_7 = NL + NL + "%% Preprocessing stage" + NL + "preProcessing=Preprocessing(inputHolder);" + NL + "preProcessing.verboseMode(1);";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "preProcessing.run(";
  protected final String TEXT_10 = ");";
  protected final String TEXT_11 = NL + NL + "%% Segmentation stage" + NL + "segmentation=Segmentation(inputHolder);" + NL + "segmentation.verboseMode(1);";
  protected final String TEXT_12 = NL;
  protected final String TEXT_13 = NL + "segmentation.run(";
  protected final String TEXT_14 = ");";
  protected final String TEXT_15 = NL;
  protected final String TEXT_16 = NL + "%% Features Extraction stage" + NL + "featuresExtraction=FeaturesExtraction(inputHolder);" + NL + "featuresExtraction.verboseMode(1);" + NL;
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL + "features";
  protected final String TEXT_19 = "=featuresExtraction.run(";
  protected final String TEXT_20 = ");";
  protected final String TEXT_21 = NL + "% Collect all features" + NL + "features=";
  protected final String TEXT_22 = NL;
  protected final String TEXT_23 = NL + "%% ------------------------ STARTING SELECTION AND CLASSIFICATION" + NL + "%% Features Selection stage";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + "%% Features Classification stage";
  protected final String TEXT_26 = NL;
  protected final String TEXT_27 = NL + "%% ------------------------END OF CLASSIFICATION PROCESS";
  protected final String TEXT_28 = NL + "diary off;";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(TEXT_1);
      @SuppressWarnings("unchecked") 
    List<InvocationChain> invocationsChains=(List<InvocationChain>)argument;
    boolean isFeaturesExtracted=false;
    if(invocationsChains.size()==0){
    	return ""; 
    }
	for(int i=0;i<invocationsChains.size();i++){ 
	InvocationChain chain=invocationsChains.get(i);

    stringBuffer.append(TEXT_2);
    stringBuffer.append(i+1);
    stringBuffer.append(TEXT_3);
     
	List<DiagramElement> inputs=chain.getElements(pl.zgora.uz.imgpro.model.diagram.Phase.INPUT);
	if(inputs.size()!=1){
		return ""; // Suppress errors
	}
	DirInput input=(DirInput) inputs.get(0);

    stringBuffer.append(TEXT_4);
    stringBuffer.append( TemplateHelper.getDelarationDeclarations(input) );
    stringBuffer.append(TEXT_5);
    stringBuffer.append(TemplateHelper.getInputParameters(input));
    stringBuffer.append(TEXT_6);
     
	List<DiagramElement> preprocessings=chain.getElements(pl.zgora.uz.imgpro.model.diagram.Phase.PREPROCESSING);
	if(preprocessings!= null && preprocessings.size()>0){

    stringBuffer.append(TEXT_7);
     for(DiagramElement preprocessing:preprocessings){
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TemplateHelper.getDelarationDeclarations(preprocessing));
    }
    stringBuffer.append(TEXT_9);
    stringBuffer.append(TemplateHelper.listInvocations(preprocessings));
    stringBuffer.append(TEXT_10);
    }
     
	List<DiagramElement> segmentations=chain.getElements(pl.zgora.uz.imgpro.model.diagram.Phase.SEGMENTATION);
	if(segmentations!= null && segmentations.size()>0){

    stringBuffer.append(TEXT_11);
     for(DiagramElement segmentation:segmentations){
    stringBuffer.append(TEXT_12);
    stringBuffer.append(TemplateHelper.getDelarationDeclarations(segmentation));
    }
    stringBuffer.append(TEXT_13);
    stringBuffer.append(TemplateHelper.listInvocations(segmentations));
    stringBuffer.append(TEXT_14);
    }
    stringBuffer.append(TEXT_15);
     
	List<DiagramElement> extractions=chain.getElements(pl.zgora.uz.imgpro.model.diagram.Phase.FEATURE_EXTRACTION);
	if(extractions!= null && extractions.size()>0){
	isFeaturesExtracted=true;

    stringBuffer.append(TEXT_16);
     for(DiagramElement extraction:extractions){
    stringBuffer.append(TEXT_17);
    stringBuffer.append(TemplateHelper.getDelarationDeclarations(extraction));
    }
    stringBuffer.append(TEXT_18);
    stringBuffer.append(i+1);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(TemplateHelper.listInvocations(extractions));
    stringBuffer.append(TEXT_20);
     }
    }
     
	if(isFeaturesExtracted){

    stringBuffer.append(TEXT_21);
    stringBuffer.append(TemplateHelper.gatherFeatures(invocationsChains.size()));
    }
    stringBuffer.append(TEXT_22);
     
 	// Selekcje
	List<DiagramElement> selections=invocationsChains.get(0).getElements(pl.zgora.uz.imgpro.model.diagram.Phase.FEATURES_SELECTION);
	if(selections!= null && selections.size()>0){

    stringBuffer.append(TEXT_23);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(SelectionHelper.transformSelections(selections));
     }
     
	// Klasyfikacje
	List<DiagramElement> classifications=invocationsChains.get(0).getElements(pl.zgora.uz.imgpro.model.diagram.Phase.CLASSIFICATION);
	if(classifications!= null && classifications.size()>0){

    stringBuffer.append(TEXT_25);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(ClasifficationHelper.transformClassifications(classifications));
    stringBuffer.append(TEXT_27);
     }
    stringBuffer.append(TEXT_28);
    return stringBuffer.toString();
  }
}
