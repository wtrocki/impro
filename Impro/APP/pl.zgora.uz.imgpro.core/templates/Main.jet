<%@ jet package="pl.zgora.uz.imgpro.core.templates" class="MainScriptTemplate" imports="pl.zgora.uz.imgpro.model.diagram.* pl.zgora.uz.imgpro.core.templates.TemplateHelper pl.zgora.uz.imgpro.core.transformation.InvocationChain java.util.List" %>
% Image Processing Toolbox AutoGenerated Script

%Initializations
diary(strcat('..\logs\Log_', datestr(now, 'yyyy-mm-dd_HH.MM.SS'), '.txt'));

<%  @SuppressWarnings("unchecked") 
    List<InvocationChain> invocationsChains=(List<InvocationChain>)argument;
    boolean isFeaturesExtracted=false;
    if(invocationsChains.size()==0){
    	return ""; 
    }
	for(int i=0;i<invocationsChains.size();i++){ 
	InvocationChain chain=invocationsChains.get(i);
%>	
%% ------------------------  EXTRACTION FOR FEATURE GROUP NR <%=i+1%>
%% Input arguments
<% 
	List<DiagramElement> inputs=chain.getElements(pl.zgora.uz.imgpro.model.diagram.Phase.INPUT);
	if(inputs.size()!=1){
		return ""; // Suppress errors
	}
	DirInput input=(DirInput) inputs.get(0);
%>
<%= TemplateHelper.getDelarationDeclarations(input) %>
inputHolder=DirInput(<%=TemplateHelper.getInputParameters(input)%>);
<% 
	List<DiagramElement> preprocessings=chain.getElements(pl.zgora.uz.imgpro.model.diagram.Phase.PREPROCESSING);
	if(preprocessings!= null && preprocessings.size()>0){
%>

%% Preprocessing stage
preProcessing=Preprocessing(inputHolder);
preProcessing.verboseMode(1);
<% for(DiagramElement preprocessing:preprocessings){%>
<%=TemplateHelper.getDelarationDeclarations(preprocessing)%><%}%>
preProcessing.run(<%=TemplateHelper.listInvocations(preprocessings)%>);<%}%>
<% 
	List<DiagramElement> segmentations=chain.getElements(pl.zgora.uz.imgpro.model.diagram.Phase.SEGMENTATION);
	if(segmentations!= null && segmentations.size()>0){
%>

%% Segmentation stage
segmentation=Segmentation(inputHolder);
segmentation.verboseMode(1);
<% for(DiagramElement segmentation:segmentations){%>
<%=TemplateHelper.getDelarationDeclarations(segmentation)%><%}%>
segmentation.run(<%=TemplateHelper.listInvocations(segmentations)%>);<%}%>

<% 
	List<DiagramElement> extractions=chain.getElements(pl.zgora.uz.imgpro.model.diagram.Phase.FEATURE_EXTRACTION);
	if(extractions!= null && extractions.size()>0){
	isFeaturesExtracted=true;
%>
%% Features Extraction stage
featuresExtraction=FeaturesExtraction(inputHolder);
featuresExtraction.verboseMode(1);

<% for(DiagramElement extraction:extractions){%>
<%=TemplateHelper.getDelarationDeclarations(extraction)%><%}%>
features<%=i+1%>=featuresExtraction.run(<%=TemplateHelper.listInvocations(extractions)%>);
<% }%>
<%}%>
<% 
	if(isFeaturesExtracted){
%>
% Collect all features
features=<%=TemplateHelper.gatherFeatures(invocationsChains.size())%>
<%}%>

<% 
 	// Selekcje
	List<DiagramElement> selections=invocationsChains.get(0).getElements(pl.zgora.uz.imgpro.model.diagram.Phase.FEATURES_SELECTION);
	if(selections!= null && selections.size()>0){
%>
%% ------------------------ STARTING SELECTION AND CLASSIFICATION
%% Features Selection stage
<%=SelectionHelper.transformSelections(selections)%>
<% }%>
<% 
	// Klasyfikacje
	List<DiagramElement> classifications=invocationsChains.get(0).getElements(pl.zgora.uz.imgpro.model.diagram.Phase.CLASSIFICATION);
	if(classifications!= null && classifications.size()>0){
%>
%% Features Classification stage
<%=ClasifficationHelper.transformClassifications(classifications)%>
%% ------------------------END OF CLASSIFICATION PROCESS
<% }%>
diary off;